rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2025, 5, 28);
    // }

    // Allow users to read their own chatFoldersCache subcollection
    // Documents in this collection could have the folder name as the ID,
    // or a field 'folderName' inside.
    match /users/{userId}/chatFoldersCache/{folderDocId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Write access will be handled by the Cloud Function (or admin SDK)
      allow write: if false; 
    }

    // Allow users to read/write their own settings document in the userSettings collection
    match /userSettings/{userId} {
      // Allow authenticated users to read/write their own settings
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow unauthenticated writes (for test setup helper using admin context)
      // WARNING: This is less secure for production, OK for testing.
      // Consider adding specific admin checks in real app rules.
      allow write: if request.auth == null;
    }

    // Deny direct access to the top-level user document
    match /users/{userId} {
        allow read, write: if false;
    }
  }
}